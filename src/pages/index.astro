---
import {getStore} from "@netlify/blobs";
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import SendChatMessage from '../components/SendChatMessage';

const store = getStore("messages");
const {blobs: messageBlobs} = await store.list();
const messages = await Promise.all(messageBlobs.map(async ({key}) => 
	store.get(key, {type: "json"})
));
---

<Layout title="Welcome to Astro.">
	<main>
		<h1><span class="text-gradient">Astro Real-time Chat</span></h1>

		<SendChatMessage client:load />

		<h2>Latest messages:</h2>
		<ul role="list" class="link-card-grid">
			{messages.map(({sender, timestamp, body}) => (
				<Card
					sender={sender}
					timestamp={timestamp}
					body={body}
				/>
			))}
		</ul>
	</main>
</Layout>

<script>
const sse = new EventSource('/message-feed');

sse.onerror = function (event) {
  console.error({ event });
};

const ul = document.querySelector('ul');

sse.addEventListener("message", function (event) {
  console.log(event)
  const li = document.createElement('li');
  li.innerText = event.data;
  // TODO actually hook this up to react, with something like `useSyncExternalStore()`
  ul?.appendChild(li);
})
</script>

<style>
	main {
		margin: auto;
		padding: 1rem;
		width: 800px;
		max-width: calc(100% - 2rem);
		color: white;
		font-size: 20px;
		line-height: 1.6;
	}
	.astro-a {
		position: absolute;
		top: -32px;
		left: 50%;
		transform: translatex(-50%);
		width: 220px;
		height: auto;
		z-index: -1;
	}
	h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
		margin-bottom: 1em;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		margin-bottom: 2rem;
		border: 1px solid rgba(var(--accent-light), 25%);
		background: linear-gradient(rgba(var(--accent-dark), 66%), rgba(var(--accent-dark), 33%));
		padding: 1.5rem;
		border-radius: 8px;
	}
	.instructions code {
		font-size: 0.8em;
		font-weight: bold;
		background: rgba(var(--accent-light), 12%);
		color: rgb(var(--accent-light));
		border-radius: 4px;
		padding: 0.3em 0.4em;
	}
	.instructions strong {
		color: rgb(var(--accent-light));
	}
	.link-card-grid {
		display: flex;
		flex-direction: column;
		gap: 2rem;
		padding: 0;
	}
</style>
